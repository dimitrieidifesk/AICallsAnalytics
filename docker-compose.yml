services:
  ai-analytics-backend:
    container_name: ai-analytics-backend
    build:
      context: .
      dockerfile: Dockerfile
    restart: "unless-stopped"
    command: bash ./start.sh
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - contact_center_network

  rabbitmq:
    image: rabbitmq:management
    container_name: ai-analytics-rabbitmq
    restart: "unless-stopped"
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      RABBITMQ_DEFAULT_USER: $APP_CONFIG__RABBIT__USER
      RABBITMQ_DEFAULT_PASS: $APP_CONFIG__RABBIT__PASSWORD
    volumes:
      - rabbit_data:/var/lib/rabbitmq

  db:
    container_name: ai-analytics-db
    restart: "unless-stopped"
    image: postgres
    command: -c 'max_connections=200'
    env_file:
      - .env
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    ports:
      - "5430:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data

  queue:
    container_name: ai-analytics-queue
    restart: "unless-stopped"
    command: bash ./queue_start.sh
    env_file:
      - .env
    build:
      dockerfile: Dockerfile_queue
      context: .
    volumes:
      - ./logs:/app/logs

volumes:
  backend:
  queue:
  db_data:
  rabbit_data:

networks:
  contact_center_network:
    external: true
    name: ncc_v20_contact_center_network